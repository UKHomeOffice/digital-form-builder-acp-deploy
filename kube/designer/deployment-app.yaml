apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .DEPLOYMENT_NAME }}
spec:
  replicas: {{ .REPLICAS }}
  selector:
    matchLabels:
      name: {{ .DEPLOYMENT_NAME }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: {{ .DEPLOYMENT_NAME }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                      - {{ .DEPLOYMENT_NAME }}
      imagePullSecrets:
        - name: registrykey
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      containers:
        - name: {{ .DEPLOYMENT_NAME }}
          image: {{ .APP_IMAGE }}:{{ .APP_VERSION }}
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 10m
              memory: 100Mi
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
        - name: nginx-proxy
          image: {{ .NGINX_IMAGE }}:{{ .NGINX_VERSION }}
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 10Mi
          env:
            - name: HTTPS_LISTEN_PORT
              value: "10444"
            - name: ERROR_REDIRECT_CODES
              value: "599"
            - name: NAXSI_USE_DEFAULT_RULES
              value: "FALSE"
            - name: PORT_IN_HOST_HEADER
              value: "FALSE"
            - name: PROXY_SERVICE_HOST
              value: 127.0.0.1
            - name: PROXY_SERVICE_PORT
              value: "3000"
            - name: SERVER_CERT
              value: /certs/tls.crt
            - name: SERVER_KEY
              value: /certs/tls.key
            - name: SSL_CIPHERS
              value: ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:AES256+EDH:!aNULL
          ports:
            - name: https
              containerPort: 10444
          livenessProbe:
            httpGet:
              path: /
              port: 10444
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 10444
              scheme: HTTPS
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /certs
              name: certs
              readOnly: true
            - name: bundle
              mountPath: /etc/ssl/certs
              readOnly: true
        {{- if eq .ENABLE_KEYCLOAK "true"}}
        - name: keycloak-gatekeeper
          image: {{ .KEYCLOAK_IMAGE }}:{{ .KEYCLOAK_VERSION }}
          ports:
              - containerPort: 10443
                name: https
                protocol: TCP
          env:
            - name: PROXY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: client_secret
                  name: gatekeeper
          args:
            - --listen=:10443
            - --client-id=gatekeeper
            - --discovery-url={{ .KEYCLOAK_URL }}
            - --upstream-url=https://127.0.0.1:10444
            - --tls-cert=/certs/tls.crt
            - --tls-private-key=/certs/tls.key
            - --resources=uri=/*|roles=users
            - --resources=uri=/admin/*|roles=admin
          resources:
            limits:
              memory: 100Mi
            requests:
              memory: 50Mi
          securityContext:
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /certs
              name: certs
            - mountPath: /etc/ssl/certs
              name: bundle
              readOnly: true
        {{- end }}
      volumes:
        - name: certs
          secret:
            secretName: {{ .DEPLOYMENT_NAME }}-service-tls-cmio
        - name: bundle
        configMap:
          name: bundle
---
kind: pipeline
name: smoke-tests
type: kubernetes

trigger:
  branch: main
  event:
    - push
    - tag
steps:
  - name: clone xgov
    image: alpine/git
    commands:
      - bin/env.sh
      - source .env && echo "XXXX $${XGOV_SHA} $${BASE_IMAGE_APP_SHA}"
      - env
      - git clone https://github.com/XGovFormBuilder/digital-form-builder/
      - cd digital-form-builder
      - git checkout $${XGOV_SHA}
  # find cached node_modules by the file 'yarn.lock'
  - name: load-yarn-cache
    image: sinlead/drone-cache:1.0.0
    settings:
      action: load
      key: yarn.lock
      mount: node_modules
      prefix: yarn-modules-v1
    volumes:
      - name: cache
        path: /cache
  - name: yarn-install
    image: node:11-alpine
    commands:
      - source .env && echo "XXXX $${XGOV_SHA}"
      - env
      - git clone https://github.com/XGovFormBuilder/digital-form-builder/
      - cd digital-form-builder
      - git checkout $${XGOV_SHA}
      - yarn
      - yarn build:dependencies
  # save installed node_modules to cache
  - name: save-yarn-cache
    image: sinlead/drone-cache:1.0.0
    settings:
      action: save
      key: yarn.lock
      mount: node_modules
      prefix: yarn-modules-v1
    volumes:
      - name: cache
        path: /cache
depends_on:
  - designer
volumes:
  - name: cache
    path: /tmp/cache